# Projeto de Teste de Carga com K6

## ‚úÖ Objetivo
Simular 500 usu√°rios simult√¢neos por 5 minutos em uma API p√∫blica (http:jsonplaceholder.typicode.com).


## üß™ Como executar

- Certifique-se de que o path corresponde ao projeto
cd k6-load-test

- Execute o script em:
k6 run scripts/test-api.js 

- Verifique o report HTML
[Report HTML](./summary.html)

 - Se recomenda extremamente a abertura do report no browser

## üß™ Sum√£rio resumo dos testes
 
- 1. POST ‚Äì Cria√ß√£o de recurso
Objetivo: Criar um novo post via POST /posts

A√ß√£o: Envia payload com title, body e userId (dados aleat√≥rios)

Valida√ß√µes:

Status code 201 Created

Corpo da resposta cont√©m um id v√°lido

- 2. GET ‚Äì Leitura do recurso criado
Objetivo: Verificar se o recurso rec√©m-criado est√° dispon√≠vel

A√ß√£o: GET /posts/{id}

Valida√ß√µes:

Status code 200 OK

Corpo da resposta cont√©m o title previamente enviado

- 3. PUT ‚Äì Atualiza√ß√£o do recurso
Objetivo: Atualizar o conte√∫do do post criado

A√ß√£o: PUT /posts/{id} com dados atualizados

Valida√ß√µes:

Status code 200 OK

Corpo da resposta cont√©m title atualizado

- 4. DELETE ‚Äì Exclus√£o do recurso
Objetivo: Remover o recurso do sistema

A√ß√£o: DELETE /posts/{id}

Valida√ß√µes:

Status code 200 OK

- 5. NEGATIVO: GET em ID inexistente
Objetivo: Validar comportamento ao buscar recurso inv√°lido

A√ß√£o: GET /posts/999999 (ID que n√£o existe)

Valida√ß√µes:

Status code 404 Not Found (ou 200 com {} se for API fake)

- 6. NEGATIVO: DELETE de recurso j√° deletado
Objetivo: Verificar como a API lida com m√∫ltiplas exclus√µes do mesmo recurso

A√ß√£o: Segunda chamada de DELETE no mesmo ID

Valida√ß√µes:

Status code 200 OK (API fake n√£o retorna erro, mas ignora)

- 7. NEGATIVO: POST com payload vazio
Objetivo: Simular envio de dados inv√°lidos

A√ß√£o: POST /posts com corpo vazio ('')

Valida√ß√µes:

Esperado: status 400 Bad Request (em API real)

Aceito: status 201 Created (API fake n√£o v√£lida)

